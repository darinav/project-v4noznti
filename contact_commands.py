from colorama import Fore
from books import AddressBook, Record, address_book_errors

import re

def _find_record_exact(book: AddressBook, name: str):
    try:
        return book.find(name)
    except address_book_errors.ContactNotFound:
        pass
    return None

def _format_record_row(record: Record):
    phones = ', '.join(ph for ph in record.phones)
    emails = ', '.join(em for em in record.emails)
    return [record.name, phones, emails, record.address, str(record.birthday or '')]

def _print_contacts_table(records: list[Record]):
    headers = [
        "–Ü–º'—è",
        "–¢–µ–ª–µ—Ñ–æ–Ω",
        "Email",
        "–ê–¥—Ä–µ—Å–∞",
        "–î–ù"
    ]
    rows = [_format_record_row(r) for r in records]
    if not rows:
        print(Fore.YELLOW + "–ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –≤–∏–≤–æ–¥—É.")
        return

    col_widths = [max(len(str(cell)) for cell in col) for col in zip(*([headers] + rows))]

    def fmt_row(row_data):
        return " ‚îÇ ".join(str(cell).ljust(w) for cell, w in zip(row_data, col_widths))

    border = "‚îÄ‚îº‚îÄ".join("‚îÄ" * w for w in col_widths)

    print(Fore.CYAN + fmt_row(headers))
    print(Fore.MAGENTA + border)
    for row in rows:
        print(fmt_row(row))

def ask_valid_birthday():
    while True:
        birthday = input(Fore.RED + "–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–† –∞–±–æ Enter): ").strip()
        if not birthday:
            return ""
        if re.match(r"^\d{2}\.\d{2}\.\d{4}$", birthday):
            return birthday
        print(Fore.RED + "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 21.07.2024).")

def _parse_days(parts):
    if len(parts) > 2:
        try:
            days = int(parts[2])
            if days < 1 or days > 365:
                days = 7
        except Exception:
            days = 7
    else:
        days = 7
    return days

def handle_contact_command(command: str, book: AddressBook) -> None:
    parts = command.strip().split()
    if not parts:
        print(Fore.RED + "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    action = parts[0].lower()

    if action in ("help", "exit", "close", "switch"):
        return

    if action == "add" and len(parts) >= 2 and parts[1] == "contact":
        name = " ".join(parts[2:]) if len(parts) > 2 else input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ").strip()
        if not name:
            print(Fore.RED + "‚ö†Ô∏è –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        try:
            record = Record(name)
            phone = input(Fore.YELLOW + "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–∞–±–æ Enter): ").strip()
            if phone:
                record.add_phone(phone)
            email = input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å email (–∞–±–æ Enter): ").strip()
            if email:
                record.add_email(email)
            address = input(Fore.GREEN + "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–∞–±–æ Enter): ").strip()
            if address:
                record.add_address(address)
            birthday = ask_valid_birthday()
            if birthday:
                record.add_birthday(birthday)
            book.add_record(record)
            print(Fore.GREEN + f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –¥–æ–¥–∞–Ω–æ!")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    elif action == "edit" and len(parts) >= 2 and parts[1] == "contact":
        name = " ".join(parts[2:]) if len(parts) > 2 else input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ").strip()
        if not name:
            print(Fore.RED + "‚ö†Ô∏è –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        record = _find_record_exact(book, name)
        if not record:
            print(Fore.RED + f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        try:
            phone = input(Fore.YELLOW + "–ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∞–±–æ Enter): ").strip()
            if phone:
                record.edit_phone('', phone)
            email = input(Fore.CYAN + "–ù–æ–≤–∏–π email (–∞–±–æ Enter): ").strip()
            if email:
                record.edit_email('', email)
            address = input(Fore.GREEN + "–ù–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ (–∞–±–æ Enter): ").strip()
            if address:
                record.edit_address(address)
            birthday = ask_valid_birthday()
            if birthday:
                record.edit_birthday(birthday)
            print(Fore.GREEN + f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    elif action == "delete" and len(parts) >= 2 and parts[1] == "contact":
        name = " ".join(parts[2:]) if len(parts) > 2 else input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
        if not name:
            print(Fore.RED + "‚ö†Ô∏è –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        record = _find_record_exact(book, name)
        if not record:
            print(Fore.RED + f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        try:
            book.delete_record(name)
            print(Fore.GREEN + f"üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    elif action == "show" and len(parts) >= 2 and parts[1] == "contact":
        name = " ".join(parts[2:]) if len(parts) > 2 else input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É: ").strip()
        if not name:
            print(Fore.RED + "‚ö†Ô∏è –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        record = _find_record_exact(book, name)
        if not record:
            print(Fore.RED + f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        _print_contacts_table([record])

    elif command == "show all contacts":
        records: list[Record] = [r for _, r in book.items()]
        if records:
            _print_contacts_table(records)
        else:
            print(Fore.YELLOW + "–ê–¥—Ä–µ—Å–Ω–∞ –∫–Ω–∏–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")

    elif parts[0] == "show" and parts[1] == "birthdays":
        days = _parse_days(parts)
        records: list[Record] = [
            r for r, _ in sorted(book.upcoming_birthdays(upcoming_birthdays_period=days), key=lambda i: i[1])
        ]
        if records:
            print(Fore.CYAN + f"–ö–æ–Ω—Ç–∞–∫—Ç–∏, —É —è–∫–∏—Ö –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É –Ω–∞—Å—Ç—É–ø–Ω—ñ {days} –¥–Ω—ñ–≤:")
            _print_contacts_table(records)
        else:
            print(Fore.YELLOW + "–ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —ñ–∑ –¥–Ω—è–º–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.")

    elif parts[0] == "search" and parts[1] == "contact":
        keyword = " ".join(parts[2:]) if len(parts) > 2 else input(Fore.CYAN + "–í–≤–µ–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
        if not keyword:
            print(Fore.RED + "‚ö†Ô∏è –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        records: list[Record] = book.search(keyword)
        if records:
            _print_contacts_table(records)
        else:
            print(Fore.YELLOW + "–ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    else:
        print(Fore.RED + "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.")
