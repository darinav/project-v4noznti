"""
note_commands.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–æ—Ç–∞—Ç–æ–∫ —É CLI-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.

–ó–∞–±–µ–∑–ø–µ—á—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–æ—à—É–∫, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ —Ç–µ–≥—ñ–≤
—É –º–µ–∂–∞—Ö –æ–±'—î–∫—Ç–∞ NoteBook.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import shlex
from colorama import Fore
from books import NoteBook, Note
from books.note_book.error import *
from .command_suggestions import command_suggester


def handle_note_command(command: str, notebook: NoteBook):
    """
    –û–±—Ä–æ–±–ª—è—î CLI-–∫–æ–º–∞–Ω–¥–∏, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        command (str): —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.
        notebook (NoteBook): –æ–±‚Äô—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∞–º–∏.

    –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
        - add note "<title>" "<text>"
        - edit note <title>
        - edit tag <title>
        - delete tag <title> <tag>
        - delete note <title>
        - search note <keyword>
        - show all notes
        - sort notes by tag
    """
    try:
        parts = shlex.split(command.strip())
    except ValueError:
        # If shlex parsing fails, fall back to regular split
        parts = command.strip().split()

    if not parts:
        print(Fore.RED + "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    action = parts[0].lower()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏
    if action == "add" and len(parts) >= 2 and parts[1] == "note":
        if len(parts) < 3:
            # Handle incomplete "add note" command by prompting for missing parameters
            print(Fore.YELLOW + "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏: ", end="")
            title = input().strip()
            if not title:
                print(Fore.RED + "‚ùå –ù–∞–∑–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return
            print(Fore.YELLOW + "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ", end="")
            text = input().strip()
            if not text:
                print(Fore.RED + "‚ùå –¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return
        else:
            title = parts[2].strip('"')
            text = " ".join(parts[3:]).strip('"')

        try:
            note = Note(title, text)
            notebook.add_note(note)
            print(Fore.GREEN + f"‚úÖ –ù–æ—Ç–∞—Ç–∫—É '{title}' –¥–æ–¥–∞–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "edit" and len(parts) >= 3 and parts[1] == "note":
        # Handle multiword titles with quotes
        if len(parts) == 3:
            title = parts[2].strip('"')
        else:
            # Join all parts from index 2 onwards and strip quotes
            title = " ".join(parts[2:]).strip('"')

        try:
            index = notebook.find_note_index_by_title(title)
            if index is None:
                raise NoteNotFound()

            index, note = notebook.get_note(index)

            print("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ", end="")
            new_text = input().strip()
            note.edit_text(new_text)
            print(Fore.GREEN + "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —É –Ω–æ—Ç–∞—Ç—Ü—ñ
    elif action == "edit" and len(parts) >= 3 and parts[1] == "tag":
        # Handle multiword titles with quotes
        if len(parts) == 3:
            title = parts[2].strip('"')
        else:
            # Join all parts from index 2 onwards and strip quotes
            title = " ".join(parts[2:]).strip('"')

        try:
            index = notebook.find_note_index_by_title(title)
            if index is None:
                raise NoteNotFound()

            index, note = notebook.get_note(index)

            print("–ù–æ–≤—ñ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ", end="")
            tags = input().strip().split()
            note.replace_tags(tags)
            print(Fore.GREEN + "‚úÖ –¢–µ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É –∑ –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "delete" and len(parts) >= 4 and parts[1] == "tag":
        # Handle multiword titles with quotes
        # If title is quoted, it will be a single element after shlex parsing
        # If title is unquoted multiword, we need to join elements until the last one (which is the tag)
        if len(parts) == 4:
            # Simple case: delete tag "title" tag or delete tag title tag
            title = parts[2].strip('"')
            tag_to_delete = parts[3]
        else:
            # Complex case: delete tag multiword title tag
            # The last element is the tag, everything from index 2 to -1 is the title
            title = " ".join(parts[2:-1]).strip('"')
            tag_to_delete = parts[-1]

        try:
            index = notebook.find_note_index_by_title(title)
            if index is None:
                raise NoteNotFound()

            index, note = notebook.get_note(index)
            note.delete_tags(tag_to_delete)
            print(Fore.GREEN + f"üóëÔ∏è –¢–µ–≥ '{tag_to_delete}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "delete" and len(parts) >= 3 and parts[1] == "note":
        # Handle multiword titles with quotes
        if len(parts) == 3:
            title = parts[2].strip('"')
        else:
            # Join all parts from index 2 onwards and strip quotes
            title = " ".join(parts[2:]).strip('"')

        try:
            notebook.delete_note_by_title(title)
            print(Fore.GREEN + f"üóëÔ∏è –ù–æ—Ç–∞—Ç–∫—É '{title}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "search" and len(parts) >= 3 and parts[1] == "note":
        keyword = " ".join(parts[2:])
        results = notebook.search(keyword)

        for index, note in results:
            print(note)

    # –ü–æ–∫–∞–∑ —É—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
    elif command == "show all notes":
        for index, note in notebook.notes():
            print(note)

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–≥–∞–º–∏
    elif command == "sort notes by tag":
        notes = notebook.notes(order=NoteBook.SortOrder.tags)

        for index, note in notes:
            print(note)

    # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏
    else:
        """
        –í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –Ω–∞–π–∫—Ä–∞—â–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.
        """
        suggestion_message, suggested_command = command_suggester.suggest_command_interactive(command, "note")
        print(Fore.RED + suggestion_message)
        
        if suggested_command:
            try:
                user_response = input().strip().lower()
                if user_response == 'y' or user_response == 'yes':
                    print(Fore.CYAN + f"–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {suggested_command}")
                    handle_note_command(suggested_command, notebook)
                elif user_response == 'n' or user_response == 'no':
                    pass  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º–æ–≤–∏–≤—Å—è, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
                else:
                    print(Fore.YELLOW + "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 'y' –∞–±–æ 'n'.")
            except KeyboardInterrupt:
                print(Fore.YELLOW + "\n–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            except Exception as e:
                print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: {e}")