"""
note_commands.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–æ—Ç–∞—Ç–æ–∫ —É CLI-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.

–ó–∞–±–µ–∑–ø–µ—á—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–æ—à—É–∫, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ —Ç–µ–≥—ñ–≤
—É –º–µ–∂–∞—Ö –æ–±'—î–∫—Ç–∞ NoteBook.
"""

from colorama import Fore
from books import NoteBook, Note
from books.note_book.book import NoteBook as FullNoteBook
NoteBook.SortOrder = FullNoteBook.SortOrder

def _find_note_exact(notebook: NoteBook, title: str):
    notes = [item for item in notebook.notes() if item[1].title == title]
    return notes[0] if notes else None

def _print_notes_table(notes: list[Note]):
    headers = [
        "–ù–∞–∑–≤–∞",
        "–¢–µ–∫—Å—Ç",
        "–¢–µ–≥–∏"
    ]
    rows = [[n.title, n.text, n.tags] for n in notes]
    if not rows:
        print(Fore.YELLOW + "–ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–≤–æ–¥—É.")
        return

    col_widths = [max(len(str(cell)) for cell in col) for col in zip(*([headers] + rows))]
    def fmt_row(row):
        return " ‚îÇ ".join(str(cell).ljust(w) for cell, w in zip(row, col_widths))

    border = "‚îÄ‚îº‚îÄ".join("‚îÄ" * w for w in col_widths)

    print(Fore.CYAN + fmt_row(headers))
    print(Fore.MAGENTA + border)
    for row in rows:
        print(fmt_row(row))

def handle_note_command(command: str, notebook: NoteBook):
    parts = command.strip().split()

    if not parts:
        print(Fore.RED + "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    action = parts[0].lower()

    if action == "add" and len(parts) >= 2 and parts[1] == "note":
        if len(parts) == 2:
            title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏: ").strip()
            if not title:
                print(Fore.RED + "‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return
            text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ").strip()
            if not text:
                print(Fore.RED + "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return
        elif len(parts) == 3:
            title = parts[2].strip('"')
            text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ").strip()
            if not text:
                print(Fore.RED + "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return
        else:
            title = parts[2].strip('"')
            text = " ".join(parts[3:]).strip('"')

        try:
            note = Note(title, text)
            notebook.add_note(note)
            print(Fore.GREEN + f"‚úÖ –ù–æ—Ç–∞—Ç–∫—É '{title}' –¥–æ–¥–∞–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    elif action == "edit" and len(parts) >= 2 and parts[1] == "note":
        if len(parts) == 2:
            title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ").strip()
            if not title:
                print(Fore.RED + "‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return
        else:
            title = parts[2]

        found = _find_note_exact(notebook, title)
        if not found:
            print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        index, note = found
        new_text = input("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ").strip()
        note.edit_text(new_text)
        print(Fore.GREEN + "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")

    elif action == "edit" and len(parts) >= 2 and parts[1] == "tag":
        if len(parts) == 2:
            title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤: ").strip()
            if not title:
                print(Fore.RED + "‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return
        else:
            title = parts[2]

        found = _find_note_exact(notebook, title)
        if not found:
            print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        index, note = found
        tags_input = input("–ù–æ–≤—ñ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ").strip()
        tags = tags_input.split() if tags_input else []
        note.replace_tags(*tags)
        print(Fore.GREEN + "‚úÖ –¢–µ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

    elif action == "delete" and len(parts) >= 2 and parts[1] == "tag":
        if len(parts) == 2:
            title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É: ").strip()
            if not title:
                print(Fore.RED + "‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return

            found = _find_note_exact(notebook, title)
            if not found:
                print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            tag_to_delete = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
            if not tag_to_delete:
                print(Fore.RED + "‚ö†Ô∏è –¢–µ–≥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return

        elif len(parts) == 3:
            title = parts[2]
            found = _find_note_exact(notebook, title)
            if not found:
                print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            tag_to_delete = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
            if not tag_to_delete:
                print(Fore.RED + "‚ö†Ô∏è –¢–µ–≥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return

        else:
            title = parts[2]
            tag_to_delete = parts[3]
            found = _find_note_exact(notebook, title)
            if not found:
                print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

        index, note = found
        if tag_to_delete not in note.tags_list:
            print(Fore.YELLOW + f"‚ö†Ô∏è –¢–µ–≥ '{tag_to_delete}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –Ω–æ—Ç–∞—Ç—Ü—ñ.")
        else:
            note.delete_tags(tag_to_delete)
            print(Fore.GREEN + f"üóëÔ∏è –¢–µ–≥ '{tag_to_delete}' –≤–∏–¥–∞–ª–µ–Ω–æ.")

    elif action == "delete" and len(parts) >= 2 and parts[1] == "note":
        if len(parts) == 2:
            title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
            if not title:
                print(Fore.RED + "‚ö†Ô∏è –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
                return
        else:
            title = parts[2]

        found = _find_note_exact(notebook, title)
        if not found:
            print(Fore.RED + f"‚ùå –ù–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        index, _ = found
        notebook.delete_note(index)
        print(Fore.GREEN + f"üóëÔ∏è –ù–æ—Ç–∞—Ç–∫—É '{title}' –≤–∏–¥–∞–ª–µ–Ω–æ.")

    elif action == "search" and len(parts) >= 2 and parts[1] == "note":
        if len(parts) == 2:
            keyword = input("–í–≤–µ–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
            if not keyword:
                print(Fore.RED + "‚ö†Ô∏è –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return
        else:
            keyword = " ".join(parts[2:])
        notes = notebook.search(keyword)
        _print_notes_table([note for _, note in notes])

    elif command == "show all notes":
        _print_notes_table([note for _, note in notebook.notes()])

    elif command == "sort notes by tag":
        notes = notebook.notes(order=NoteBook.SortOrder.tags)
        _print_notes_table([note for _, note in notes])

    else:
        print(Fore.RED + "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫.")
