from books import NoteBook, Note
from books.note_book.error import NoteNotFound, NoteAlreadyExist, NoteTitleMandatory, NoteTextMandatory
from colorama import Fore, Style

def handle_note_command(command: str, note_book: NoteBook):
    try:
        if command.startswith("add note "):
            parts = command[len("add note "):].strip()
            if parts.startswith('"'):
                split = parts.split('"')
                if len(split) >= 4:
                    title = split[1].strip()
                    text = split[3].strip()
                    note = Note(title, text)
                    note_book.add_note(note)
                    print(Fore.GREEN + f"üìù –ù–æ—Ç–∞—Ç–∫—É '{title}' –¥–æ–¥–∞–Ω–æ.")
                    return
            print(Fore.RED + "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: add note \"<title>\" \"<text>\"")

        elif command.startswith("search note "):
            title = command[len("search note "):].strip()
            note = note_book.find(title)
            print(Fore.YELLOW + str(note))

        elif command.startswith("delete note "):
            title = command[len("delete note "):].strip()
            note_book.delete_note(title)
            print(Fore.YELLOW + f"üóëÔ∏è –ù–æ—Ç–∞—Ç–∫—É '{title}' –≤–∏–¥–∞–ª–µ–Ω–æ.")

        elif command.startswith("edit note "):
            title = command[len("edit note "):].strip()
            note = note_book.find(title)
            new_text = input("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ").strip()
            if new_text:
                note.edit_text(new_text)
                print(Fore.GREEN + f"‚úÖ –ù–æ—Ç–∞—Ç–∫—É '{title}' –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                print(Fore.RED + "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")

        elif command.startswith("edit tag "):
            title = command[len("edit tag "):].strip()
            note = note_book.find(title)
            new_tags = input("üè∑Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ").strip()
            note.edit_tags(new_tags)
            print(Fore.GREEN + f"üè∑Ô∏è –¢–µ–≥–∏ –Ω–æ—Ç–∞—Ç–∫–∏ '{title}' –æ–Ω–æ–≤–ª–µ–Ω–æ.")

        elif command.startswith("delete tag "):
            parts = command[len("delete tag "):].strip().split(maxsplit=1)
            if len(parts) != 2:
                print(Fore.RED + "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: delete tag <title> <tag>")
                return
            title, tag = parts[0], parts[1]
            note = note_book.find(title)
            note.remove_tag(tag)
            print(Fore.YELLOW + f"üóëÔ∏è –¢–µ–≥ '{Fore.BLUE + tag + Fore.YELLOW}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –Ω–æ—Ç–∞—Ç–∫–∏ '{title}'")

        elif command == "show all notes":
            notes = note_book.notes()
            if not notes:
                print("üì≠ –ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.")
            for note in notes:
                print(Fore.YELLOW + str(note))

        elif command == "sort notes by tag":
            notes = note_book.notes(order=NoteBook.SortOrder.tags)
            if not notes:
                print("üì≠ –ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.")
            for note in notes:
                print(Fore.YELLOW + str(note))

        else:
            print(Fore.RED + "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞.")

    except (NoteNotFound, NoteAlreadyExist, NoteTitleMandatory, NoteTextMandatory) as e:
        print(Fore.RED + f"‚ö†Ô∏è {e}")
    except Exception as e:
        print(Fore.RED + f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
