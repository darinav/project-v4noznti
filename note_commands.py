"""
note_commands.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–æ—Ç–∞—Ç–æ–∫ —É CLI-–∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.

–ó–∞–±–µ–∑–ø–µ—á—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–æ—à—É–∫, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ —Ç–µ–≥—ñ–≤
—É –º–µ–∂–∞—Ö –æ–±'—î–∫—Ç–∞ NoteBook.
"""

from colorama import Fore
from books import NoteBook, Note
from books.note_book.book import NoteBook as FullNoteBook
NoteBook.SortOrder = FullNoteBook.SortOrder
from books.note_book.error import *

def handle_note_command(command: str, notebook: NoteBook):
    parts = command.strip().split()

    if not parts:
        print(Fore.RED + "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    action = parts[0].lower()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏
    if action == "add" and len(parts) >= 3 and parts[1] == "note":
        title = parts[2].strip('"')
        text = " ".join(parts[3:]).strip('"')

        try:
            note = Note(title, text)
            notebook.add_note(note)
            print(Fore.GREEN + f"‚úÖ –ù–æ—Ç–∞—Ç–∫—É '{title}' –¥–æ–¥–∞–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "edit" and len(parts) >= 3 and parts[1] == "note":
        title = parts[2]

        try:
            results = notebook.search_by_title(title)
            if not results:
                raise NoteNotFound()
            index, note = results[0]

            print("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ", end="")
            new_text = input().strip()
            note.edit_text(new_text)
            print(Fore.GREEN + "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —É –Ω–æ—Ç–∞—Ç—Ü—ñ
    elif action == "edit" and len(parts) >= 3 and parts[1] == "tag":
        title = parts[2]

        try:
            results = notebook.search_by_title(title)
            if not results:
                raise NoteNotFound()
            index, note = results[0]

            print("–ù–æ–≤—ñ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ", end="")
            tags = input().strip().split()
            note.replace_tags(tags)
            print(Fore.GREEN + "‚úÖ –¢–µ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—É –∑ –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "delete" and len(parts) >= 4 and parts[1] == "tag":
        title = parts[2]
        tag_to_delete = parts[3]

        try:
            results = notebook.search_by_title(title)
            if not results:
                raise NoteNotFound()
            index, note = results[0]
            note.delete_tags(tag_to_delete)
            print(Fore.GREEN + f"üóëÔ∏è –¢–µ–≥ '{tag_to_delete}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "delete" and len(parts) >= 3 and parts[1] == "note":
        title = parts[2]

        try:
            results = notebook.search_by_title(title)
            if not results:
                raise NoteNotFound()
            index, _ = results[0]
            notebook.delete_note(index)
            print(Fore.GREEN + f"üóëÔ∏è –ù–æ—Ç–∞—Ç–∫—É '{title}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏
    elif action == "search" and len(parts) >= 3 and parts[1] == "note":
        keyword = " ".join(parts[2:])
        results = notebook.search(keyword)
        for _, n in results:
            print(n)

    # –ü–æ–∫–∞–∑ —É—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
    elif command == "show all notes":
        for _, note in notebook.notes():
            print(note)

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–≥–∞–º–∏
    elif command == "sort notes by tag":
        notes = notebook.notes(order=NoteBook.SortOrder.tags)
        for _, n in notes:
            print(n)

    else:
        print(Fore.RED + "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫.")